	/** 
	 * Helper for the regression test.  Verifies the heap property for all nodes.
	 */
	private boolean hasHeapProperty() {	
		for(int i=1; i <= count; i++) {
			if( findRightChild(i) <= count ) {  // if i Has two children...
				// ... and i is smaller than either of them, , then the heap property is violated.
				if( items[i].compareTo(items[findRightChild(i)]) < 0 ) return false;
				if( items[i].compareTo(items[findLeftChild(i)]) < 0 ) return false;
			}
			else if( findLeftChild(i) <= count ) {  // if n has one child...
				// ... and i is smaller than it, then the heap property is violated.
				if( items[i].compareTo(items[findLeftChild(i)]) < 0 ) return false;
			}
			else break;  // Neither child exists.  So we're done.	
		}
		return true;
	}

	/**
	 * Regression test
	 */
	public static void main(String[] args) {
		
		ArrayedHeap280<Integer> H = new ArrayedHeap280<Integer>(10);
		
		// Empty heap should have the heap property.
		if(!H.hasHeapProperty()) System.out.println("Does not have heap property.");

		// Insert items 1 through 10, checking after each insertion that 
		// the heap property is retained, and that the top of the heap is correctly i.
		for(int i = 1; i <= 10; i++) {
			H.insert(i);
			if(H.item() != i) System.out.println("Expected current item to be " + i + ", got " + H.item());
			if(!H.hasHeapProperty()) System.out.println("Does not have heap property.");
		}
		
		// Remove the elements 10 through 1 from the heap, chekcing
		// after each deletion that the heap property is retained and that
		// the correct item is at the top of the heap.
		for(int i = 10; i >= 1; i--) {
			// Remove the element i.
			H.deleteItem();
			// If we've removed item 1, the heap should be empty.
			if(i==1) { 
				if( !H.isEmpty() ) System.out.println("Expected the heap to be empty, but it wasn't.");
			}
			else {
				// Otherwise, the item left at the top of the heap should be equal to i-1.
				if(H.item() != i-1) System.out.println("Expected current item to be " + i + ", got " + H.item());
				if(!H.hasHeapProperty()) System.out.println("Does not have heap property.");
			}
		}
		
		System.out.println("Regression Test Complete.");
	}